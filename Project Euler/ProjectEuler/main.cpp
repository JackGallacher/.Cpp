#include <iostream>
#include <string>
using namespace std;

int main()
{
	/* Task 1 - "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	Find the sum of all the multiples of 3 or 5 below 1000" */

	int multiples = 0;
	for (int i = 0; i < 1000; i++)
	{
		if (i % 3 == 0 || i % 5 == 0)
		{
			multiples = multiples + i;
		}
		if (i == 999)
		{
			cout << "The addition of multiples of 3 and 5 below 100 is: " << multiples << "\n";
		}
	}

	/* Task 2- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
	By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. */

	int fibonacci_one = 0;
	int fibonacci_two = 1;
	int fibonacci_three = 0;

	int fibonacci_multiple = 0;

	while (fibonacci_three < 4000000)
	{
		fibonacci_three = fibonacci_one + fibonacci_two;
		fibonacci_one = fibonacci_two;
		fibonacci_two = fibonacci_three;

		if (fibonacci_three % 2 == 0)
		{
			fibonacci_multiple = fibonacci_multiple + fibonacci_three;
		}
		//cout << "The addition of all even Fibonacci multiples under 4 million is: " << fibonacci_multiple << "\n";
	}
	cout << "The addition of all even Fibonacci multiples under 4 million is: " << fibonacci_multiple << "\n";

	/*Task 3- The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?*/

	long long answer = 0;
	long long number = 600851475143;
	bool foundprime = false;

	for (long long i = 2; i < number; i++)
	{
		if (number % i == 0)
		{
			foundprime = true;
			for (long long j = 2; j < i; j++)
			{
				if (i % j == 0)
				{
					foundprime = false;
					break;
				}
			}
			if (foundprime)
			{
				answer = i;
				if (answer > 5000)//janky fix to just show the largest prime factor found.
				{
					cout << "The largest prime factor of 600851475143 is: " << answer << "\n";
					break;
				}
			}
		}
	}

	/*Task 4- A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99, 
	Find the largest palindrome made from the product of two 3-digit numbers.*/


	int product = 0;
	string product_string;	
	int palendrome = 0;

	for (int i = 100; i <= 999; i++)
	{
		for (int j = i; j <= 999; j++)// instead of making j = 100, making it equal to i halves the algorithm time as it prevents the opposite equation being checked e.g. 134 x 657 - 657 x 134.
		{
			product = i * j;
			product_string = to_string(product);

			if (product_string == string(product_string.rbegin(), product_string.rend()))//checks the product against its reversed version. (rbegin, rend, "reverse")
			{
				product = stoi(product_string);//converts the palnedrome back to an in (stoi) to compare against the previous largest palendrome.
				if (product > palendrome)
				{		
					palendrome = product;
					//for (int j = 999; j >= i; j--)
				}
			}
		}		
	}
	cout << "The largest palindrome made from two 3 digit numbers is: "<< palendrome << "\n";

	/*2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly 
	divisible by all of thenumbers from 1 to 20?*/

	bool foundit = false;
	long attempt = 1;
	int divided = 1;
	int yescount = 0;

	while (foundit == false)
	{
		for (int i = 1; i <= 20; i++)
		{
			divided = attempt % i;
			if (divided == 0)
			{
				yescount++;
				divided = 1;
			}
		}
		if (yescount == 20)
		{
			cout << "The smallest number that is evenly divisible 1 through 20 is: "<< attempt << "\n";
			bool foundit = true;
			break;
		}
		else
		{
			attempt++;
			yescount = 0;
		}
	}
	system("pause");
}
